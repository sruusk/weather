// Mocks generated by Mockito 5.4.5 from annotations
// in weather/test/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather/data/forecast.dart' as _i3;
import 'package:weather/data/forecast_point.dart' as _i2;
import 'package:weather/data/location.dart' as _i4;
import 'package:weather/data/weather_data.dart' as _i5;
import 'package:weather/services/connectivity_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeForecastPoint_0 extends _i1.SmartFake implements _i2.ForecastPoint {
  _FakeForecastPoint_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeForecast_1 extends _i1.SmartFake implements _i3.Forecast {
  _FakeForecast_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocation_2 extends _i1.SmartFake implements _i4.Location {
  _FakeLocation_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherData].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherData extends _i1.Mock implements _i5.WeatherData {
  MockWeatherData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearCacheForLocation(_i4.Location? location) => super.noSuchMethod(
        Invocation.method(
          #clearCacheForLocation,
          [location],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i2.ForecastPoint> getCurrentWeather(_i4.Location? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [location],
        ),
        returnValue: _i6.Future<_i2.ForecastPoint>.value(_FakeForecastPoint_0(
          this,
          Invocation.method(
            #getCurrentWeather,
            [location],
          ),
        )),
      ) as _i6.Future<_i2.ForecastPoint>);

  @override
  _i6.Future<_i3.Forecast> getForecast(_i4.Location? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecast,
          [location],
        ),
        returnValue: _i6.Future<_i3.Forecast>.value(_FakeForecast_1(
          this,
          Invocation.method(
            #getForecast,
            [location],
          ),
        )),
      ) as _i6.Future<_i3.Forecast>);

  @override
  _i6.Future<_i4.Location> reverseGeocoding(
    double? lat,
    double? lon, {
    String? lang = 'fi',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reverseGeocoding,
          [
            lat,
            lon,
          ],
          {#lang: lang},
        ),
        returnValue: _i6.Future<_i4.Location>.value(_FakeLocation_2(
          this,
          Invocation.method(
            #reverseGeocoding,
            [
              lat,
              lon,
            ],
            {#lang: lang},
          ),
        )),
      ) as _i6.Future<_i4.Location>);

  @override
  _i6.Future<List<_i4.Location>> getAutoCompleteResults(
    String? query, {
    dynamic lang = 'fi',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAutoCompleteResults,
          [query],
          {#lang: lang},
        ),
        returnValue: _i6.Future<List<_i4.Location>>.value(<_i4.Location>[]),
      ) as _i6.Future<List<_i4.Location>>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i7.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i8.ConnectivityResult> get connectionStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatusStream),
        returnValue: _i6.Stream<_i8.ConnectivityResult>.empty(),
      ) as _i6.Stream<_i8.ConnectivityResult>);

  @override
  _i8.ConnectivityResult get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i8.ConnectivityResult.bluetooth,
      ) as _i8.ConnectivityResult);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnectedMobile => (super.noSuchMethod(
        Invocation.getter(#isConnectedMobile),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnectedWifi => (super.noSuchMethod(
        Invocation.getter(#isConnectedWifi),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnectedEthernet => (super.noSuchMethod(
        Invocation.getter(#isConnectedEthernet),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i8.ConnectivityResult> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i6.Future<_i8.ConnectivityResult>.value(
            _i8.ConnectivityResult.bluetooth),
      ) as _i6.Future<_i8.ConnectivityResult>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
